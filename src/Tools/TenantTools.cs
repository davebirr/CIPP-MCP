using CippMcp.Services;
using ModelContextProtocol.Server;
using System.ComponentModel;

namespace CippMcp.Tools;

[McpServerToolType]
public class TenantTools
{
    private readonly CippApiService _cippApiService;

    public TenantTools(CippApiService cippApiService)
    {
        _cippApiService = cippApiService;
    }

    [McpServerTool, Description("Test connection to CIPP-API")]
    public async Task<string> TestCippConnection()
    {
        try
        {
            var testResponse = await _cippApiService.GetStringAsync("me", new Dictionary<string, string>());
            return $"‚úÖ CIPP-API Connection Successful!\n\nResponse: {testResponse}";
        }
        catch (Exception ex)
        {
            return $"‚ùå CIPP-API Connection Failed!\n\nError: {ex.Message}";
        }
    }

    [McpServerTool, Description("Get comprehensive tenant dashboard with key metrics and insights")]
    public async Task<string> GetTenantDashboard(
        [Description("Tenant ID or domain (e.g., 'contoso.onmicrosoft.com')")] string tenantId)
    {
        if (string.IsNullOrEmpty(tenantId))
        {
            return "Error: Tenant ID is required";
        }

        try
        {
            var dashboard = new System.Text.StringBuilder();
            dashboard.AppendLine($"üè¢ **TENANT DASHBOARD: {tenantId}**");
            dashboard.AppendLine($"Generated: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
            dashboard.AppendLine();

            // Get tenant basic info
            try
            {
                var tenantInfo = await _cippApiService.GetStringAsync("ListTenants", new Dictionary<string, string>
                {
                    ["TenantFilter"] = tenantId
                });
                dashboard.AppendLine("üìä **TENANT OVERVIEW**");
                dashboard.AppendLine($"```json\n{tenantInfo}\n```");
                dashboard.AppendLine();
            }
            catch (Exception ex)
            {
                dashboard.AppendLine($"‚ö†Ô∏è Could not retrieve tenant info: {ex.Message}");
                dashboard.AppendLine();
            }

            // Get user summary
            try
            {
                var users = await _cippApiService.GetStringAsync("ListUsers", new Dictionary<string, string>
                {
                    ["tenantFilter"] = tenantId,
                    ["$top"] = "100"
                });
                dashboard.AppendLine("üë• **USER SUMMARY**");
                dashboard.AppendLine($"```json\n{users}\n```");
                dashboard.AppendLine();
            }
            catch (Exception ex)
            {
                dashboard.AppendLine($"‚ö†Ô∏è Could not retrieve user data: {ex.Message}");
                dashboard.AppendLine();
            }

            // Get MFA status
            try
            {
                var mfaUsers = await _cippApiService.GetStringAsync("ListMFAUsers", new Dictionary<string, string>
                {
                    ["tenantFilter"] = tenantId
                });
                dashboard.AppendLine("üîê **MFA STATUS**");
                dashboard.AppendLine($"```json\n{mfaUsers}\n```");
                dashboard.AppendLine();
            }
            catch (Exception ex)
            {
                dashboard.AppendLine($"‚ö†Ô∏è Could not retrieve MFA status: {ex.Message}");
                dashboard.AppendLine();
            }

            // Get device summary
            try
            {
                var devices = await _cippApiService.GetStringAsync("ListDevices", new Dictionary<string, string>
                {
                    ["tenantFilter"] = tenantId
                });
                dashboard.AppendLine("üì± **DEVICE SUMMARY**");
                dashboard.AppendLine($"```json\n{devices}\n```");
                dashboard.AppendLine();
            }
            catch (Exception ex)
            {
                dashboard.AppendLine($"‚ö†Ô∏è Could not retrieve device data: {ex.Message}");
                dashboard.AppendLine();
            }

            // Get recent alerts
            try
            {
                var alerts = await _cippApiService.GetStringAsync("GetCippAlerts", new Dictionary<string, string>());
                dashboard.AppendLine("üö® **RECENT ALERTS**");
                dashboard.AppendLine($"```json\n{alerts}\n```");
                dashboard.AppendLine();
            }
            catch (Exception ex)
            {
                dashboard.AppendLine($"‚ö†Ô∏è Could not retrieve alerts: {ex.Message}");
                dashboard.AppendLine();
            }

            dashboard.AppendLine("---");
            dashboard.AppendLine("üí° **Dashboard generated by CIPP-MCP for AI Assistant use**");

            return dashboard.ToString();
        }
        catch (Exception ex)
        {
            return $"‚ùå Error generating tenant dashboard: {ex.Message}";
        }
    }

    [McpServerTool, Description("List all customer tenants managed by CIPP")]
    public async Task<string> ListTenants(
        [Description("Include all tenants (true) or exclude some system tenants (false)")] bool allTenantSelector = false,
        [Description("Filter tenants by name (optional)")] string? filter = null,
        [Description("Clear cache and fetch fresh data")] bool clearCache = false)
    {
        try
        {
            var queryParams = new Dictionary<string, string>
            {
                ["AllTenantSelector"] = allTenantSelector.ToString().ToLower(),
                ["ClearCache"] = clearCache.ToString().ToLower(),
                ["Mode"] = "TenantList"
            };

            // Add filter if provided
            if (!string.IsNullOrEmpty(filter))
            {
                queryParams["tenantFilter"] = filter;
            }

            var tenantsJson = await _cippApiService.GetStringAsync("ListTenants", queryParams);
            
            if (tenantsJson.StartsWith("Error:"))
            {
                return tenantsJson;
            }

            var filterNote = !string.IsNullOrEmpty(filter) ? $" (filtered by: {filter})" : "";
            var scopeNote = allTenantSelector ? " (including all tenants)" : " (standard tenant list)";
            
            return $"Customer Tenants{filterNote}{scopeNote}:\n\n{tenantsJson}";
        }
        catch (Exception ex)
        {
            return $"Error retrieving tenants: {ex.Message}";
        }
    }

    [McpServerTool, Description("Get detailed information about a specific tenant")]
    public async Task<string> GetTenantDetails(
        [Description("The tenant ID or domain name")] string tenantId)
    {
        if (string.IsNullOrEmpty(tenantId))
        {
            return "Error: Tenant ID is required";
        }

        try
        {
            var queryParams = new Dictionary<string, string>
            {
                ["TenantFilter"] = tenantId
            };

            var tenantDetails = await _cippApiService.GetStringAsync("ListTenants", queryParams);
            
            if (tenantDetails.StartsWith("Error:"))
            {
                return tenantDetails;
            }

            return $"Tenant Details for {tenantId}:\n\n{tenantDetails}";
        }
        catch (Exception ex)
        {
            return $"Error retrieving tenant details: {ex.Message}";
        }
    }

    [McpServerTool, Description("Get tenant domain health information")]
    public async Task<string> GetTenantDomainHealth(
        [Description("The tenant domain to check")] string domain)
    {
        if (string.IsNullOrEmpty(domain))
        {
            return "Error: Domain is required";
        }

        try
        {
            var queryParams = new Dictionary<string, string>
            {
                ["TenantDomain"] = domain
            };

            var healthInfo = await _cippApiService.GetStringAsync("ListDomainHealth", queryParams);
            
            if (healthInfo.StartsWith("Error:"))
            {
                return healthInfo;
            }

            return $"Domain Health for {domain}:\n\n{healthInfo}";
        }
        catch (Exception ex)
        {
            return $"Error retrieving domain health: {ex.Message}";
        }
    }
}
